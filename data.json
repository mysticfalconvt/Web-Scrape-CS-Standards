[{"practiceNumber":1,"corePractice":"Practice 1. Fostering an Inclusive Computing Culture","overview":"Building an inclusive and diverse computing culture requires strategies for incorporating perspectives from people of different genders, ethnicities, and abilities. Incorporating these perspectives involves understanding the personal, ethical, social, economic, and cultural contexts in which people operate. Considering the needs of diverse users during the design process is essential to producing inclusive computational products. ","practiceStatements":[{"practiceStatementNumber":1,"practiceStatement":"asdfasf"},{"practiceStatementNumber":2,"practiceStatement":"asdfasf"},{"practiceStatementNumber":3,"practiceStatement":"asdfasf"}]},{"practiceNumber":2,"corePractice":"Practice 2. Collaborating Around Computing","overview":"Collaborative computing is the process of performing a computational task by working in pairs and on teams. Because it involves asking for the contributions and feedback of others, effective collaboration can lead to better outcomes than working independently. Collaboration requires individuals to navigate and incorporate diverse perspectives, conflicting ideas, disparate skills, and distinct personalities. Students should use collaborative tools to effectively work together and to create complex artifacts. ","practiceStatements":[{"practiceStatementNumber":1,"practiceStatement":"asdfasf"},{"practiceStatementNumber":2,"practiceStatement":"asdfasf"},{"practiceStatementNumber":3,"practiceStatement":"asdfasf"},{"practiceStatementNumber":4,"practiceStatement":"asdfasf"}]},{"practiceNumber":3,"corePractice":"Practice 3. Recognizing and Defining Computational Problems","overview":"The ability to recognize appropriate and worthwhile opportunities to apply computation is a skill that develops over time and is central to computing. Solving a problem with a computational approach requires defining the problem, breaking it down into parts, and evaluating each part to determine whether a computational solution is appropriate.","practiceStatements":[{"practiceStatementNumber":1,"practiceStatement":"asdfasf"},{"practiceStatementNumber":2,"practiceStatement":"asdfasf"},{"practiceStatementNumber":3,"practiceStatement":"asdfasf"}]},{"practiceNumber":4,"corePractice":"Practice 4. Developing and Using Abstractions","overview":"Abstractions are formed by identifying patterns and extracting common features from specific examples to create generalizations. Using generalized solutions and parts of solutions designed for broad reuse simplifies the development process by managing complexity.","practiceStatements":[{"practiceStatementNumber":1,"practiceStatement":"asdfasf"},{"practiceStatementNumber":2,"practiceStatement":"asdfasf"},{"practiceStatementNumber":3,"practiceStatement":"asdfasf"},{"practiceStatementNumber":4,"practiceStatement":"asdfasf"}]},{"practiceNumber":5,"corePractice":"Practice 5. Creating Computational Artifacts","overview":"The process of developing computational artifacts embraces both creative expression and the exploration of ideas to create prototypes and solve computational problems. Students create artifacts that are personally relevant or beneficial to their community and beyond. Computational artifacts can be created by combining and modifying existing artifacts or by developing new artifacts. Examples of computational artifacts include programs, simulations, visualizations, digital animations, robotic systems, and apps.","practiceStatements":[{"practiceStatementNumber":1,"practiceStatement":"asdfasf"},{"practiceStatementNumber":2,"practiceStatement":"asdfasf"},{"practiceStatementNumber":3,"practiceStatement":"asdfasf"}]},{"practiceNumber":6,"corePractice":"Practice 6. Testing and Refining Computational Artifacts","overview":"Testing and refinement is the deliberate and iterative process of improving a computational artifact. This process includes debugging (identifying and fixing errors) and comparing actual outcomes to intended outcomes. Students also respond to the changing needs and expectations of end users and improve the performance, reliability, usability, and accessibility of artifacts.","practiceStatements":[{"practiceStatementNumber":1,"practiceStatement":"asdfasf"},{"practiceStatementNumber":2,"practiceStatement":"asdfasf"},{"practiceStatementNumber":3,"practiceStatement":"asdfasf"}]},{"practiceNumber":7,"corePractice":"Practice 7. Communicating About Computing","overview":"Communication involves personal expression and exchanging ideas with others. In computer science, students communicate with diverse audiences about the use and effects of computation and the appropriateness of computational choices. Students write clear comments, document their work, and communicate their ideas through multiple forms of media. Clear communication includes using precise language and carefully considering possible audiences.","practiceStatements":[{"practiceStatementNumber":1,"practiceStatement":"asdfasf"},{"practiceStatementNumber":2,"practiceStatement":"asdfasf"},{"practiceStatementNumber":3,"practiceStatement":"asdfasf"}]}]